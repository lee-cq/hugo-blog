<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>List-Watch on LeeCQ小空间</title><link>https://blog-g.leecq.cn/tags/list-watch/</link><description>Recent content in List-Watch on LeeCQ小空间</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 05 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog-g.leecq.cn/tags/list-watch/index.xml" rel="self" type="application/rss+xml"/><item><title>Kube-ApiServer的List-Watch机制</title><link>https://blog-g.leecq.cn/p/kube-apiserver%E7%9A%84list-watch%E6%9C%BA%E5%88%B6/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog-g.leecq.cn/p/kube-apiserver%E7%9A%84list-watch%E6%9C%BA%E5%88%B6/</guid><description>&lt;h1 id="kube-apiserver的list-watch机制"&gt;Kube-ApiServer的List-Watch机制
&lt;/h1&gt;&lt;p&gt;我们知道kube-apiserver提供了一个Kubernetes中各种资源的增删改查的接口，不仅需要对内部其他四个组件提供服务，还需要给外部的用户以及集群内可能安装的插件使用，因此它接收到的请求量是十分巨大的，为了减少这种请求量，降低kube-apiserver的压力，便设计出了list-watch机制。&lt;/p&gt;
&lt;p&gt;List-watch是Kubernetes统一的异步消息处理机制，各组件间协同都采用该机制进行通信，对系统的性能、数据一致性起到关键性的作用，为声明式风格的API奠定了良好的基础。它是优雅的通信方式，是Kubernetes架构的精髓。&lt;/p&gt;
&lt;p&gt;List-watch由list和watch组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list调用资源的list API罗列资源，获取静态的所有数据，主要用于查询，基于HTTP短链接实现。&lt;/li&gt;
&lt;li&gt;watch调用资源的watch API，监听每个资源的增删改事件，基于HTTP长链接实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="一个异步消息的系统对消息机制有至少如下四点要求"&gt;一个异步消息的系统，对消息机制有至少如下四点要求：
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;消息的可靠性:&lt;/strong&gt; List API可以查询当前的资源状态，客户端通过期望的状态和实际的状态的对比，纠正状态不一致的资源，并可解决消息丢失的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息的实时性:&lt;/strong&gt; List-watch机制下，每当apiserver的资源产生状态变更事件，都会将事件及时的推送给客户端，从而保证了消息的实时性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息的顺序性:&lt;/strong&gt; 在并发的场景下，客户端在短时间内可能会收到同一个资源的多个事件，为保证资源的最终状态，K8S在每个资源的事件中都带一个resourceVersion的标签，这个标签是递增的数字，所以当客户端并发处理同一个资源的事件时，它就可以对比此标签来保证最终的状态和最新的事件所期望的状态的一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高性能:&lt;/strong&gt; 虽然仅通过周期性调用list API也能达到资源最终一致性的效果，但是周期性频繁的轮询大大的增大了开销，增加apiserver的压力。而watch作为异步消息通知机制，复用一条长链接，保证实时性的同时也保证了性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="list"&gt;List
&lt;/h2&gt;&lt;p&gt;List API可以查询当前的资源状态，客户端通过期望的状态和实际的状态的对比，纠正状态不一致的资源，并可解决消息丢失的问题。&lt;/p&gt;
&lt;h2 id="watch"&gt;Watch
&lt;/h2&gt;&lt;p&gt;Watch是如何通过HTTP长链接接收apiserver发来的资源变更事件呢？秘诀就是Chunked transfer encoding（分块传输编码），它首次出现在HTTP/1.1。&lt;/p&gt;
&lt;p&gt;Watch是通过HTTP长连接实现的，其秘诀就是通过响应头中声明Chunked transfer encoding（分块传输编码）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP分块传输编码允许服务器为动态生成的内容维持HTTP持久链接。通常，持久链接需要服务器在开始发送消息体前发送Content-Length消息头字段，但是对于动态生成的内容来说，在内容创建完之前是不可知的。使用分块传输编码，数据分解成一系列数据块，并以一个或多个块发送，这样服务器可以发送数据而不需要预先知道发送内容的总大小。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://blog-g.leecq.cn/p/kube-apiserver%E7%9A%84list-watch%E6%9C%BA%E5%88%B6/HTTP-Chunked.jpg"
width="737"
height="270"
srcset="https://blog-g.leecq.cn/p/kube-apiserver%E7%9A%84list-watch%E6%9C%BA%E5%88%B6/HTTP-Chunked_hu_5bd4dcc6b291ce8e.jpg 480w, https://blog-g.leecq.cn/p/kube-apiserver%E7%9A%84list-watch%E6%9C%BA%E5%88%B6/HTTP-Chunked_hu_d1be835d854fa5aa.jpg 1024w"
loading="lazy"
alt="HTTP Chunked Transfer Encoding"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="655px"
&gt;&lt;/p&gt;
&lt;h2 id="通过curl命令watch-pods资源"&gt;通过CURL命令watch pods资源
&lt;/h2&gt;&lt;p&gt;当客户端调用watch API时，apiserver在response的HTTP Header中设置Transfer-Encoding的值为chunked，表示采用分块传输编码，客户端收到该信息后，便和服务端进行链接，并等待下一个数据块，即资源的事件信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;span class="lnt"&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ curl -ihttp://{kube-api-server-ip}:8080/api/v1/watch/pods?watch=yes
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;HTTP/1.1 200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Content-Type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Transfer-Encoding: chunked
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Date: Thu, 02 Jan 2020 20:22:59 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;{&amp;#34;type&amp;#34;:&amp;#34;ADDED&amp;#34;, &amp;#34;object&amp;#34;:{&amp;#34;kind&amp;#34;:&amp;#34;Pod&amp;#34;,&amp;#34;apiVersion&amp;#34;:&amp;#34;v1&amp;#34;,...}}
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;{&amp;#34;type&amp;#34;:&amp;#34;ADDED&amp;#34;, &amp;#34;object&amp;#34;:{&amp;#34;kind&amp;#34;:&amp;#34;Pod&amp;#34;,&amp;#34;apiVersion&amp;#34;:&amp;#34;v1&amp;#34;,...}}
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;{&amp;#34;type&amp;#34;:&amp;#34;MODIFIED&amp;#34;, &amp;#34;object&amp;#34;:{&amp;#34;kind&amp;#34;:&amp;#34;Pod&amp;#34;,&amp;#34;apiVersion&amp;#34;:&amp;#34;v1&amp;#34;,...}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="kubernetes基于list-watch机制的控制器架构"&gt;Kubernetes基于list-watch机制的控制器架构
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://blog-g.leecq.cn/p/kube-apiserver%E7%9A%84list-watch%E6%9C%BA%E5%88%B6/Kubernetes%E5%9F%BA%E4%BA%8Elist-watch%E6%9C%BA%E5%88%B6%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8%E6%9E%B6%E6%9E%84.jpg"
width="1322"
height="608"
srcset="https://blog-g.leecq.cn/p/kube-apiserver%E7%9A%84list-watch%E6%9C%BA%E5%88%B6/Kubernetes%E5%9F%BA%E4%BA%8Elist-watch%E6%9C%BA%E5%88%B6%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8%E6%9E%B6%E6%9E%84_hu_3188ff0ffe44afd6.jpg 480w, https://blog-g.leecq.cn/p/kube-apiserver%E7%9A%84list-watch%E6%9C%BA%E5%88%B6/Kubernetes%E5%9F%BA%E4%BA%8Elist-watch%E6%9C%BA%E5%88%B6%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8%E6%9E%B6%E6%9E%84_hu_2f654bfaefdedbc3.jpg 1024w"
loading="lazy"
alt="Kubernetes基于list-watch机制的控制器架构"
class="gallery-image"
data-flex-grow="217"
data-flex-basis="521px"
&gt;&lt;/p&gt;</description></item></channel></rss>